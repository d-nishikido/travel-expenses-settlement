services:
  postgres:
    image: postgres:14-alpine
    container_name: travel-expenses-db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-travel_expenses}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - travel-expenses-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  node:
    build:
      context: .
      dockerfile: docker/node/Dockerfile
    container_name: travel-expenses-app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-travel_expenses}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here}
      BACKEND_PORT: ${BACKEND_PORT:-5000}
      FRONTEND_PORT: ${FRONTEND_PORT:-3000}
    ports:
      - "3000:3000"
      - "5000:5000"
    volumes:
      - ./packages:/app/packages
      - /app/node_modules
      - /app/packages/backend/node_modules
      - /app/packages/frontend/node_modules
    networks:
      - travel-expenses-network
    command: pnpm run dev

  nginx:
    image: nginx:alpine
    container_name: travel-expenses-proxy
    depends_on:
      - node
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - travel-expenses-network

volumes:
  postgres_data:

networks:
  travel-expenses-network:
    driver: bridge