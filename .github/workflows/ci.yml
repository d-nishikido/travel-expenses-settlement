name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.14.1'

jobs:
  # Validation and Testing
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run typecheck

      - name: Run tests
        run: pnpm run test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_EXPIRES_IN: 1d

      - name: Validate environment variables
        run: pnpm run validate:env
        env:
          NODE_ENV: production
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_NAME: test_db
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET: test-jwt-secret-for-ci-validation-purposes
          JWT_EXPIRES_IN: 1d
          BACKEND_PORT: 5000
          FRONTEND_PORT: 3000
          VITE_API_URL: http://localhost:5000

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/production/backend.Dockerfile
          push: false
          tags: expense-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/production/frontend.Dockerfile
          push: false
          tags: expense-frontend:${{ github.sha }}
          build-args: |
            VITE_API_URL=${{ secrets.PRODUCTION_API_URL || 'https://api.example.com' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Push images to registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker tag expense-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/expense-backend:latest
          docker tag expense-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/expense-backend:${{ github.sha }}
          docker tag expense-frontend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/expense-frontend:latest
          docker tag expense-frontend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/expense-frontend:${{ github.sha }}
          
          docker push ${{ secrets.DOCKER_USERNAME }}/expense-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/expense-backend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/expense-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/expense-frontend:${{ github.sha }}

  # E2E Tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run E2E tests in Docker
        run: |
          docker-compose -f docker-compose.e2e.yml up --build --abort-on-container-exit
          docker-compose -f docker-compose.e2e.yml down -v

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'