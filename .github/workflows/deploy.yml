name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        if: vars.DEPLOYMENT_PLATFORM == 'AWS'

      - name: Deploy to AWS ECS
        if: vars.DEPLOYMENT_PLATFORM == 'AWS'
        run: |
          # Update ECS task definition with new image tag
          aws ecs register-task-definition \
            --family expense-app-${{ inputs.environment }} \
            --task-definition-file ./deploy/ecs-task-definition-${{ inputs.environment }}.json
          
          # Update ECS service
          aws ecs update-service \
            --cluster expense-cluster-${{ inputs.environment }} \
            --service expense-service-${{ inputs.environment }} \
            --task-definition expense-app-${{ inputs.environment }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        if: vars.DEPLOYMENT_PLATFORM == 'K8S'

      - name: Deploy to Kubernetes
        if: vars.DEPLOYMENT_PLATFORM == 'K8S'
        run: |
          # Update Kubernetes deployment
          kubectl set image deployment/expense-backend \
            backend=${{ secrets.DOCKER_USERNAME }}/expense-backend:${{ inputs.tag }} \
            -n ${{ inputs.environment }}
          
          kubectl set image deployment/expense-frontend \
            frontend=${{ secrets.DOCKER_USERNAME }}/expense-frontend:${{ inputs.tag }} \
            -n ${{ inputs.environment }}
          
          # Wait for rollout to complete
          kubectl rollout status deployment/expense-backend -n ${{ inputs.environment }}
          kubectl rollout status deployment/expense-frontend -n ${{ inputs.environment }}

      - name: Deploy via SSH
        if: vars.DEPLOYMENT_PLATFORM == 'VPS'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /opt/expense-app
            
            # Pull latest images
            docker pull ${{ secrets.DOCKER_USERNAME }}/expense-backend:${{ inputs.tag }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/expense-frontend:${{ inputs.tag }}
            
            # Update and restart services
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d
            
            # Health check
            sleep 30
            curl -f http://localhost/api/health || exit 1

      - name: Run post-deployment tests
        run: |
          # Simple health check
          HEALTH_CHECK_URL="${{ secrets[format('{0}_URL', inputs.environment)] }}/api/health"
          curl -f $HEALTH_CHECK_URL || exit 1
          
          echo "Deployment to ${{ inputs.environment }} completed successfully!"

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ inputs.environment }} ${{ job.status }}
            Tag: ${{ inputs.tag }}
            Actor: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}